(1) 对序列B排序
(2) 计算A中每个元素在B中的序号，并构成新序列
(3) 使用LIS的方法计算最长严格递增子序列
(4) 获取最长公共子序列

struct node
{
    char c;
    int num;
} u[10005];
bool cmp(node a,node b)
{
    if (a.c==b.c) return a.num>b.num;
    return a.c<b.c;
}
vector <int> p;
char a[10005],b[10005],c[10005];
int lena,lenb,dp[10005];
int main()
{
    scanf("%s",a);//读入a串
    scanf("%s",b);//读入b串
    lena=strlen(a);
    lenb=strlen(b);
    for (i=0; i<lenb; i++)
    {
        u[i].c=b[i];
        u[i].num=i;
    }
    sort(u,u+lenb,cmp);//对b串排序
    for (i=0; i<lenb; i++) //排序后存入字符串c中，便于使用lower_bound
    {
        c[i]=u[i].c;
    }
    c[lenb]='\0';
    for (i=0; i<lena; i++) //计算A中每个元素在B中的序号
    {
        k=lower_bound(c,c+lenb,a[i])-c;
        while (k<lenb && a[i]==c[k])
        {
            p.push_back(u[k].num);
            k++;
        }
    }
    n=p.size();
    memset(dp,0,sizeof(dp));//计算最长上升子序列
    num=0;
    for (i=0; i<n; i++)
    {
        if (p[i]>dp[num])
        {
            dp[++num]=p[i];
        }
        else
        {
            k=lower_bound(dp+1,dp+1+num,p[i])-dp;
            dp[k]=p[i];
        }
    }
    printf("%d\n",num);
    return 0;
}