/*最小费用流模板 -BEGIN-*/
/*size表示网络中的结点数，编号从0开始，如果是从1开始则size=n+1*/
/*初始化：head全设为-1，Edge为边数预先设为0*/
int head[MAXN],vis[MAXN],dis[MAXN],pos[MAXN],Edge,size;
struct edgenode
{
    int to,next,w,cost;
} edge[MAXM];
  
void add_edge(int x,int y,int w,int cost)
{
    edge[Edge].to=y;
    edge[Edge].w=w;
    edge[Edge].cost=cost;
    edge[Edge].next=head[x];
    head[x]=Edge;
    Edge++;
      
      
    edge[Edge].to=x;
    edge[Edge].w=0;
    edge[Edge].cost=-cost;
    edge[Edge].next=head[y];
    head[y]=Edge;
    Edge++;
}
  
bool SPFA(int s, int t)
{
    int u,v,i;
    queue <int> q;
    memset(vis,0,sizeof(vis));
    for(i=0;i<size;i++) dis[i]=INF;
     dis[s]=0;
     vis[s]=1;
    q.push(s);
    while(!q.empty())
    {
        u=q.front(); q.pop(); vis[u]=0;
        for (i=head[u];i!=-1;i=edge[i].next)
          {
               v=edge[i].to;
               if(edge[i].w>0&&dis[u]+edge[i].cost<dis[v])
               {
                dis[v]=dis[u]+edge[i].cost;
                pos[v]=i;
                if(!vis[v])
                {
                     vis[v]=1;
                     q.push(v);
                }
               }
          }
    }
    return dis[t]!=INF;
}
int MinCostFlow(int s,int t)
{
    int i,cost=0,flow=0;
    while(SPFA(s,t))
    {
        int d=INF;
        for (i=t;i!=s;i=edge[pos[i]^1].to)
        {
            d=min(d,edge[pos[i]].w);
        }
        for(i=t;i!=s;i=edge[pos[i]^1].to)
        {
            edge[pos[i]].w-=d;
            edge[pos[i]^1].w+=d;
        }
        flow+=d;
        cost+=dis[t]*d;
    }
    return cost; // flow是最大流值
}
/*最小费用流模板 -END-*/