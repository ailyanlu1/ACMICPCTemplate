
const double PI = acos(-1.0);
struct Line
{//有向直线
    Point p;
    Vector v;
    double ang;
    Line()    { }
    Line(Point p, Vector v): p(p), v(v)    { ang = atan2(v.y, v.x); }
    Point point(double t)
    {
        return p + v*t;
    }
    bool operator < (const Line& L) const
    {
        return ang < L.ang;
    }
};

struct Circle
{
    Point c;    //圆心
    double r;    //半径
    Circle(Point c, double r):c(c), r(r)    {}
    Point point(double a)
    {//求对应圆心角的点
        return Point(c.x + r*cos(a), c.y + r*sin(a));
    }
};

//两圆相交并返回交点个数 
int getLineCircleIntersection(Line L, Circle C, double& t1, double& t2, vector<Point>& sol)
{
    double a = L.v.x, b = L.p.x - C.c.x, c = L.v.y, d = L.p.y - C.c.y;
    double e = a*a + c*c, f = 2*(a*b + c*d), g = b*b + d*d - C.r*C.r;
    double delta = f*f - 4*e*g;        //判别式
    if(dcmp(delta) < 0)    return 0;    //相离
    if(dcmp(delta) == 0)            //相切
    {
        t1 = t2 = -f / (2 * e);
        sol.push_back(L.point(t1));
        return 1;
    }
    //相交
    t1 = (-f - sqrt(delta)) / (2 * e);    sol.push_back(L.point(t1));
    t2 = (-f + sqrt(delta)) / (2 * e);    sol.push_back(L.point(t2));
    return 2;
}

//计算向量极角
double angle(Vector v)    { return atan2(v.y, v.x); }

int getCircleCircleIntersection(Circle C1, Circle C2, vector<Point>& sol)
{//圆与圆相交，并返回交点个数
    double d = Length(C1.c - C2.c);
    if(dcmp(d) == 0)
    {
        if(dcmp(C1.r - C2.r) == 0)    return -1;    //两圆重合
        return 0;                                //没有交点
    }
    if(dcmp(C1.r + C2.r - d) > 0)    return 0;
    if(dcmp(fabs(C1.r - C2.r) - d) > 0)    return 0;

    double a = angle(C2.c - C1.c);
    double da = acos((C1.r*C1.r + d*d - C2.r*C2.r) / (2*C1.r*d));
    Point p1 = C1.point(a+da), p2 = C1.point(a-da);
    sol.push_back(p1);
    if(p1 == p2)    return 1;
    sol.push_back(p2);
    return 2;
}

//过定点作圆的切线并返回切线条数
int getTangents(Point p, Circle C, Vector* v)
{
    Vector u = C.c - p;
    double dist = Length(u);
    if(dist < C.r)    return 0;
    else if(dcmp(dist - C.r) == 0)
    {
        v[0] = VRotate(u, PI/2);
        return 1;
    }
    else
    {
        double ang = asin(C.r / dist);
        v[0] = VRotate(u, +ang);
        v[1] = VRotate(u, -ang);
        return 2;
    }
}

//求两个圆的公切线，并返回切线条数
//注意，这里的Circle和上面的定义的Circle不一样
int getTangents(Circle A, Circle B, Point* a, Point* b)
{
    int cnt = 0;
    if(A.r < B.r)    { swap(A, B); swap(a, b); }
    double d2 = (A.x-B.x)*(A.x-B.x) + (A.y-B.y)*(A.y-B.y);
    double rdiff = A.r - B.r;
    double rsum = A.r + B.r;
    if(d2 < rdiff*rdiff)    return 0;    //内含

    double base = atan2(B.y-A.y, B.x-A.x);
    if(dcmp(d2) == 0 && dcmp(A.r - B.r) == 0)    return -1; //重合
    if(dcmp(d2 - rdiff*rdiff) == 0)    //内切
    {
        a[cnt] = A.point(base); b[cnt] = B.point(base); cnt++;
        return 1;
    }

    //有外公切线
    double ang = acos((A.r - B.r) / sqrt(d2));
    a[cnt] = A.point(base + ang); b[cnt] = B.point(base + ang); cnt++;
    a[cnt] = A.point(base - ang); b[cnt] = B.point(base - ang); cnt++;
    if(dcmp(rsum*rsum - d2) == 0)
    {//外切
        a[cnt] = b[cnt] = A.point(base); cnt++;
    }
    else if(dcmp(d2 - rsum*rsum) > 0)
    {
        ang = acos((A.r + B.r) / sqrt(d2));
        a[cnt] = A.point(base + ang); b[cnt] = B.point(PI + base + ang); cnt++;
        a[cnt] = A.point(base - ang); b[cnt] = B.point(PI + base - ang); cnt++;
    }
    return cnt;
}