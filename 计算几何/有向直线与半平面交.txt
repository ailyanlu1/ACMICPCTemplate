struct Line//有向直线
{
    Point p;
    Vector v;
    double ang;
    Line()    { }
    Line(Point p, Vector v): p(p), v(v)    { ang = atan2(v.y, v.x); }
    Point point(double t)
    {
        return p + v*t;
    }
    bool operator < (const Line& L) const
    {
        if (fabs(ang-L.ang)<eps)
        {
            return ((v)^(L.p-p))<0;
        }
        return ang < L.ang;
    }
};

bool OnRight(Line L,Point p)//判断是否p点在有向直线右边
{
    return ((L.v^(p-L.p))<0);
}
Point GetIntersection (Line a,Line b)//求两个有向直线的交点
{
    Vector u=a.p-b.p;
    double t=(b.v^u)/(a.v^b.v);
    return a.p+a.v*t;
}


bool IsParallel(Line a,Line b)//判断两条有向直线是否平行
{
    if (dcmp(a.v ^ b.v)==0) return 1;
    return 0;
}

Line q[MAXN];
int HalfPlane(Line *L,int n,Point *poly)//半平面交，输入直线数组L(需要保证逆时针顺序)，n是直线的个数，poly用于输出，返回值为poly中点的个数
{
    sort(L,L+n);
    int m,i;
    for (m=i=1;i<n;i++)
    {
        if (dcmp(L[i].ang-L[i-1].ang)!=0) L[m++]=L[i];
    }
    n=m;
    int l=0,r=1;
    q[0]=L[0];q[1]=L[1];
    for (int i=2;i<n;i++)
    {
        //if (IsParallel(q[r],q[r-1]) || IsParallel(q[l],q[l+1])) return 0;
        while (l < r && OnRight(L[i],GetIntersection(q[r-1],q[r]))) r--;
        while (l < r && OnRight(L[i],GetIntersection(q[l],q[l+1]))) l++;
        q[++r]=L[i];
    }
    while (l<r && OnRight(q[l],GetIntersection(q[r-1],q[r]))) r--;
    while (l<r && OnRight(q[r],GetIntersection(q[l],q[l+1]))) l++;
    if (r-l<=1 ) return 0;
    q[r+1]=q[l];
    m=0;
    for (int i=l;i<=r;i++) poly[m++]=GetIntersection(q[i],q[i+1]);
    return m;
}